#ifndef _CARRAY_SAFE
#define _CARRAY_SAFE

namespace ezpwd {
    //
    // carray_safe -- a wrapper for a C array w/ bounds checking by default
    //
    template < typename T, std::size_t S >
    class carray_safe {
    public:
	typedef T			value_type;
	typedef value_type	       *pointer;
	typedef const value_type       *const_pointer;
	typedef value_type	       &reference;
	typedef const value_type       &const_reference;
	typedef value_type	       *iterator;
	typedef const value_type       *const_iterator;
	typedef std::size_t		size_type;
	typedef std::ptrdiff_t		difference_type;
	typedef std::reverse_iterator<iterator>
					reverse_iterator;
	typedef std::reverse_iterator<const_iterator>
					const_reverse_iterator;

	pointer			_data;

	constexpr		carray_safe(
				    pointer	data_ )
				    : _data( data_ )
	{
	    ;
	}

	constexpr
	size_type		size()
	    const noexcept
	{
	    return S;
	}

	constexpr pointer	data()
	    noexcept
	{
	    return _data;
	}
	constexpr const_pointer	data()
	    const noexcept
	{
	    return _data;
	}
	    
	void			swap( carray_safe other )
	{
	    std::swap()
	}
    }; // class carray_safe
} // namespace ezpwd

#endif // _CARRAY_SAFE
